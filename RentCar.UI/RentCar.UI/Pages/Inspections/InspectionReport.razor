@page "/inspection_report"

@using System;
@using RentCar.UI.Data.Inspections.Models;
@using RentCar.UI.Data.Cars.Cars.Models;
@using RentCar.UI.Data.Rents.Models;
@using RentCar.UI.Data.Clients.Clients.Models;
@using RentCar.UI.Data.Employees.Employees.Models;
@using RentCar.UI.Data.Clients.Clients.Services;
@using RentCar.UI.Data.Employees.Employees.Services;
@using RentCar.UI.Data.Cars.Cars.Services;
@using RentCar.UI.Data.Inspections.Services;
@using RentCar.UI.Data.Rents.Services;
@using RentCar.UI.Data.Common;

@inject CarService CarService
@inject ClientService ClientService
@inject EmployeeService EmployeeService
@inject InspectionService InspectionService
@inject RentService RentService
@inject IJSRuntime JS

<h1>Inspection Report!</h1>

@if (Cars is null)
{
    <p>Loading....</p>
}
else
{
<div class="shadow-sm p-3 mb-5 bg-white rounded">

    <div style="font-size: 30px; display: flex; justify-content: flex-end; cursor:pointer;">
        <span @onclick="ExportExcel" class="fas fa-file-excel mr-3" aria-hidden="true" style="font-size: 25px; color: #31be7d;"></span>
        <span @onclick="Search" class="fas fa-search" aria-hidden="true" style="font-size: 25px; color: #e90b5a;"></span>
    </div>

    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="inspection-id">ID</label>
            <input id="inspection-id" class="form-control" @bind="id" />
        </div>
        <div class="form-group col-md-4">
            <label for="inspection-fuel">Amount of Fuel</label>
            <select @bind="amountOfFuel" id="inspection-fuel" class="form-control valid">
                <option value="null">Select</option>
                @foreach (var aof in Enum.GetValues(typeof(InspectionAmountOfFuel)))
                {
                    <option value="@aof">@aof</option>
                }
            </select>
        </div>
        <div class="form-group col-md-4">
            <label for="inspection-status">Status</label>
            <select @bind="status" id="inspection-status" class="form-control valid">
                <option value="null">Select</option>
                @foreach (var sta in Enum.GetValues(typeof(InspectionStatus)))
                {
                    <option value="@sta">@sta</option>
                }
            </select>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="inspection-employee">Employee</label>
            <select @bind="employeeID" id="inspection-employee" class="form-control valid">
                <option value="null">Select</option>
                @foreach (var epy in Employees)
                {
                    <option value="@epy.ID">@epy.Name</option>
                }
            </select>
        </div>
        <div class="form-group col-md-4">
            <label for="inspection-client">Client</label>
            <select @bind="clientID" id="inspection-client" class="form-control valid">
                <option value="null">Select</option>
                @foreach (var clt in Clients)
                {
                    <option value="@clt.ID">@clt.Name</option>
                }
            </select>
        </div>
        <div class="form-group col-md-4">
            <label for="inspection-car">Car</label>
            <select @bind="carID" id="inspection-car" class="form-control valid">
                <option value="null">Select</option>
                @foreach (var ca in Cars)
                {
                    <option value="@ca.ID">@ca.Description</option>
                }
            </select>
        </div>
    </div>

    <div class="form-check">
        <input class="form-check-input" id="inspection-glass-break" type="checkbox" @bind="glassBreak" />
        <label class="form-check-label" for="inspection-glass-break">
            Glass Break
        </label>
    </div>

    <div class="form-check">
        <input class="form-check-input" id="inspection-cat" type="checkbox" @bind="cat" />
        <label class="form-check-label" for="inspection-cat">
            Cat
        </label>
    </div>

    <div class="form-check">
        <input class="form-check-input" id="inspection-rubber-back" type="checkbox" @bind="rubberBack" />
        <label class="form-check-label" for="inspection-rubber-back">
            Rubber Back
        </label>
    </div>

    <div class="form-check">
        <input class="form-check-input" id="inspection-grated" type="checkbox" @bind="grated" />
        <label class="form-check-label" for="inspection-grated">
            Grated
        </label>
    </div>

    <div class="form-check">
        <input class="form-check-input" id="inspection-rubber-state-one" type="checkbox" @bind="rubberStateOne" />
        <label class="form-check-label" for="inspection-rubber-state-one">
            Rubber State One
        </label>
    </div>

    <div class="form-check">
        <input class="form-check-input" id="inspection-rubber-state-two" type="checkbox" @bind="rubberStateTwo" />
        <label class="form-check-label" for="inspection-rubber-state-two">
            Rubber State Two
        </label>
    </div>

    <div class="form-check">
        <input class="form-check-input" id="inspection-rubber-state-three" type="checkbox" @bind="rubberStateThree" />
        <label class="form-check-label" for="inspection-rubber-state-three">
            Rubber State Three
        </label>
    </div>

    <div class="form-check">
        <input class="form-check-input" id="inspection-rubber-state-four" type="checkbox" @bind="rubberStateFourth" />
        <label class="form-check-label" for="inspection-rubber-state-four">
            Rubber State Four
        </label>
    </div>

</div>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Employee</th>
                <th>Client</th>
                <th>Car</th>
                <th>AmountOfFuel</th>
                <th>GlassBreak</th>
                <th>RubberBack</th>
                <th>Cat</th>
                <th>Grated</th>
                <th>Status</th>
                <th>InspectionDate</th>
            </tr>
        </thead>
        <tbody>
            @if (inspections == null)
            {
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            }
            else
            {
                @foreach (var inspection in inspections)
                {
                    <tr>
                        <td>@inspection.ID</td>
                        <td>@inspection.Employee</td>
                        <td>@inspection.Client</td>
                        <td>@inspection.Car</td>
                        <td>@inspection.AmountOfFuel</td>
                        <td>@inspection.GlassBreak</td>
                        <td>@inspection.RubberBack</td>
                        <td>@inspection.Cat</td>
                        <td>@inspection.Grated</td>
                        <td>@inspection.Status</td>
                        <td>@inspection.InspectionDate</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
@code {
    public List<Client> Clients { get; set; }
    public List<Employee> Employees { get; set; }
    public List<Car> Cars { get; set; }
    private List<Inspection> inspections;

    private int? id;
    private bool? grated;
    private bool? cat;
    private bool? rubberBack;
    private bool? glassBreak;
    private bool? rubberStateOne;
    private bool? rubberStateTwo;
    private bool? rubberStateThree;
    private bool? rubberStateFourth;
    private string amountOfFuel;
    private string status;
    private int? employeeID;
    private int? clientID;
    private int? carID;

    protected override async Task OnInitializedAsync()
    {
        Clients = await ClientService.GetAll();
        Employees = await EmployeeService.GetAll();
        Cars = await CarService.GetAll();
    }


    private async Task Search()
    {
        inspections = await GetReport();
    }

    private async Task ExportExcel()
    {
        inspections = await GetReport();
        var excelBytes = ExcelService.GenerateExcelWorkbook<Inspection>(inspections);
        await JS.InvokeVoidAsync("saveAsFile", $"inspection_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.xlsx", Convert.ToBase64String(excelBytes));
    }

    private async Task<List<Inspection>> GetReport()
    {
        return await InspectionService.GetReport(id, grated, cat, rubberBack, glassBreak, rubberStateOne,
            rubberStateTwo, rubberStateThree, rubberStateFourth, amountOfFuel, status, employeeID, clientID, carID);
    }
}
