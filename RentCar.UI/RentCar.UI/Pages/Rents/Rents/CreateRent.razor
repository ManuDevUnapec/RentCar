@page "/create_rent"

@using System;
@using RentCar.UI.Data.Rents.Models;
@using RentCar.UI.Data.Cars.Cars.Models;
@using RentCar.UI.Data.Clients.Clients.Models;
@using RentCar.UI.Data.Employees.Employees.Models;
@using RentCar.UI.Data.Clients.Clients.Services;
@using RentCar.UI.Data.Employees.Employees.Services;
@using RentCar.UI.Data.Cars.Cars.Services;
@using RentCar.UI.Data.Rents.Services;

@inject CarService CarService
@inject ClientService ClientService
@inject EmployeeService EmployeeService
@inject RentService RentService
@inject NavigationManager NavigationManager

<h1>Create a Rent!</h1>

@if (requesting)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" style="width: 12rem; height: 12rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
<EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">

    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (requestFailed)
    {
        <strong style="color: red;">@errorMessage</strong>
    }

    @if (LocalErrorMessage)
    {
        <strong style="color: red;">You cannot select this car because is already rented</strong>
    }

    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="rent-client">Client</label>
            <InputSelect @bind-Value="model.ClientID" id="rent-client" class="form-control valid">
                @if (Clients is not null)
                    {
                    <option>Select</option>
                    @foreach (var model in Clients)
                        {
                        <option value="@model.ID">@model.Name</option>
                        }
                    }
            </InputSelect>
        </div>
        <div class="form-group col-md-4">
            <label for="rent-employee">Employee</label>
            <InputSelect @bind-Value="model.EmployeeID" id="rent-employee" class="form-control valid">
                @if (Employees is not null)
                    {
                    <option>Select</option>
                    @foreach (var model in Employees)
                        {
                        <option value="@model.ID">@model.Name</option>
                        }
                    }
            </InputSelect>
        </div>
        <div class="form-group col-md-4">
            <label for="rent-car">Car</label>
            <InputSelect @bind-Value="model.CarID" id="rent-car" class="form-control valid">
                @if (Clients is not null)
                    {
                    <option>Select</option>
                    @foreach (var model in Cars)
                        {
                        <option value="@model.ID">@model.Description</option>
                        }
                    }
            </InputSelect>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="rent-number-of-days">Number of Days</label>
            <InputNumber id="rent-number-of-days" class="form-control" @bind-Value="model.NumberOfDays" />
        </div>
        <div class="form-group col-md-4">
            <label for="rent-amound-per-days">Amount per Days</label>
            <InputNumber id="rent-amound-per-days" class="form-control" @bind-Value="model.AmountForDays" />
        </div>
        <div class="form-group col-md-4">
            <label for="rent-status">Status</label>
            <InputSelect @bind-Value="model.Status" id="rent-status" class="form-control valid" disabled>
                <option value="@Enum.GetName(typeof(RentStatus), 0)">@Enum.GetName(typeof(RentStatus), 0)</option>
            </InputSelect>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="rent-comment">Comment</label>
            <InputTextArea id="rent-comment" class="form-control" @bind-Value="model.Comment" />
        </div>
    </div>


    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>
}

    @code {
        public List<Client> Clients { get; set; }
        public List<Employee> Employees { get; set; }
        public List<Car> Cars { get; set; }
        public List<Rent> Rents { get; set; }
        public bool LocalErrorMessage { get; set; }
        private Rent model = new Rent();

        private bool requesting;
        private bool requestFailed;
        private string errorMessage;

        protected override async Task OnInitializedAsync()
        {
            Clients = await ClientService.GetAll();
            Employees = await EmployeeService.GetAll();
            Cars = await CarService.GetAll();
            Rents = await RentService.GetAll();
        }

        private async Task HandleValidSubmit()
        {
            try
            {
                if (Rents.Any(m => m.CarID == model.CarID && m.Status == RentStatus.Rented.ToString()))
                {
                    LocalErrorMessage = true;
                }
                else
                {
                    LocalErrorMessage = false;
                    requesting = true;
                    await RentService.Create(model);
                    requesting = false;
                    NavigationManager.NavigateTo("/rents");
                }

            }
            catch (Exception e)
            {
                requestFailed = true;
                requesting = false;
                errorMessage = e.Message;
            }
        }
    }
