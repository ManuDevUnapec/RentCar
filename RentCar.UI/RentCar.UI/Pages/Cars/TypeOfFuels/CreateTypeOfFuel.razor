@page "/create_type_of_fuels"

@using RentCar.UI.Data.Cars.TypeOfFuels.Models;
@using RentCar.UI.Data.Cars.TypeOfFuels.Services;

@inject TypeOfFuelService TypeOfFuelService
@inject NavigationManager NavigationManager

<h1>Create a Type of fuel!</h1>

@if (requesting)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" style="width: 12rem; height: 12rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="@typeOfFuel" OnValidSubmit="@HandleValidSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (requestFailed)
        {
            <strong style="color: red;">@errorMessage</strong>
        }

        <div class="form-group">

            <div class="form-group">
                <label for="description">Description</label>
                <InputText id="description" class="form-control" @bind-Value="typeOfFuel.Description" />
            </div>

            <div class="form-group">
                <label for="status">Status</label>
                <InputSelect @bind-Value="typeOfFuel.Status" id="status" class="form-control valid">
                    <option>Select</option>
                    @foreach (var status in Enum.GetValues(typeof(TypeOfFuelStauts)))
                        {
                        <option value="@status">@status</option>
                        }
                </InputSelect>
            </div>

        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

@code {
    private TypeOfFuel typeOfFuel = new TypeOfFuel();

    private bool requesting;
    private bool requestFailed;
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            requesting = true;
            await TypeOfFuelService.Create(typeOfFuel);
            requesting = false;
            NavigationManager.NavigateTo("type_of_fuels");

        }
        catch (Exception e)
        {
            requestFailed = true;
            requesting = false;
            errorMessage = e.Message;
        }
    }
}
