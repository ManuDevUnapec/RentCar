@page "/type_of_car_report"

@using RentCar.UI.Data.Cars.TypeOfCars.Models;
@using RentCar.UI.Data.Cars.TypeOfCars.Services;
@using RentCar.UI.Data.Common;

@inject TypeOfCarService TypeOfCarService
@inject IJSRuntime JS

<h1>Type Of Cars Report!</h1>

<div class="shadow-sm p-3 mb-5 bg-white rounded">

    <div style="font-size: 30px; display: flex; justify-content: flex-end; cursor:pointer;">
        <span @onclick="ExportExcel" class="fas fa-file-excel mr-3" aria-hidden="true" style="font-size: 25px; color: #31be7d;"></span>
        <span @onclick="Search" class="fas fa-search" aria-hidden="true" style="font-size: 25px; color: #e90b5a;"></span>
    </div>

    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="brand-id">ID</label>
            <input id="brand-id" class="form-control" @bind="id" />
        </div>
        <div class="form-group col-md-4">
            <label for="brand-description">Description</label>
            <input id="brand-description" class="form-control" @bind="description" />
        </div>
        <div class="form-group col-md-4">
            <label for="brand-status">Status</label>
            <select @bind="status" id="brand-status" class="form-control valid">
                <option value="null">Select</option>
                @foreach (var status in Enum.GetValues(typeof(TypeOfCarStauts)))
                {
                    <option value="@status">@status</option>
                }
            </select>
        </div>
    </div>

</div>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Description</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @if (typeOfCars == null)
        {
            <tr>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        }
        else
        {
            @foreach (var typeOfCar in typeOfCars)
            {
                <tr>
                    <td>@typeOfCar.ID</td>
                    <td>@typeOfCar.Description</td>
                    <td>@typeOfCar.Status</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<TypeOfCar> typeOfCars;
    private int? id;
    private string description;
    private string status;

    private async Task Search()
    {
        typeOfCars = await GetReport(id, description, status);
    }

    private async Task ExportExcel()
    {
        typeOfCars = await GetReport(id, description, status);
        var excelBytes = ExcelService.GenerateExcelWorkbook<TypeOfCar>(typeOfCars);
        await JS.InvokeVoidAsync("saveAsFile", $"type_of_car_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.xlsx", Convert.ToBase64String(excelBytes));
    }

    private async Task<List<TypeOfCar>> GetReport(int? id, string description, string status)
    {
        return await TypeOfCarService.GetReport(id, description, status);
    }
}
